#!/bin/zsh

# fontutil
#   © 2025 YOCKOW.
#     Licensed under MIT License.
#     See "LICENSE.txt" for more information.

set -euo pipefail
set -o extendedglob

local -r fontutilCaveat="EVERY FONT MAY BE SUBJECT TO ITS LICENSE, COPYRIGHT, PATENT, OR ANY RIGHTS ITS AUTHORS HOLD. THE ORIGINAL TOOL AUTHOR, YOCKOW, NEVER BEARS ANY RESPONSIBILITY FOR ANY ISSUES CAUSED BY THE TOOL. SEE ALSO THE LICENSE OF THE TOOL: https://GitHub.com/YOCKOW/fontutil-mac/blob/main/LICENSE.txt "

local -r commandName="$0"
local subcommandName="<subcommand placeholder>"
local -r -A subcommands=(
  [--help]="View help message."
  [authors]="View the authors of the font."
  [caveat]="View the caveat of this tool. (Internal Use)"
  [copyright]="View the copyright information of the font."
  [family-name]="View the family name(s) of the font(s)."
  [fond-name]="View the fond name of the font."
  [full-name]="View the full name of the font."
  [hash]="View the file hash for the font. (Internal Use)"
  [mobileconfig]="Export font files to a '.mobileconfig' file."
  [postscript-name]="View the PostScript name of the font."
  [publishers]="View the publishers of the font."
  [style-name]="View the style name of the font."
  [uuid]="View the UUID for the font file. (Internal Use)"
  [version]="View the version of the font."
)
local -r -A subcommandAliases=(
  [author]=authors
  [export-mobileconfig]=mobileconfig
  [family]=family-name
  [publisher]=publishers
)
local -r -a supportedContentTypes=(
  "public.opentype-font"
  "public.truetype-ttf-font"
)


##### Miscellaneous Functions #####

function printError() {
  local -r message="$1"
  printf '\033[31merror:\033[m %s\n' "$message" 1>&2
}

function printWarning() {
  local -r message="$1"
  printf '\033[33mwarning:\033[m %s\n' "$message" 1>&2
}

function printInfo() {
  local -r message="$1"
  printf '\033[2minfo:\033[m %s\n' "$message" 1>&2
}

function printHelp() {
  {
    echo "Usage: $commandName <subcommand> [options...]"
    echo
    echo "Subcommands:"
    
    local -r -a subcommandNames=("${(@k)subcommands}")
    local subcommandName
    for subcommandName in ${(o)subcommandNames}; do
      if [[ "$subcommandName" == "--help" ]]; then
        continue
      fi
      printf "%16s: %s\n" "$subcommandName" "${subcommands[$subcommandName]}"
    done
    echo 

    echo "Subcommand Aliases:"
    local -r -a subcommandAliasNames=(${(@k)subcommandAliases})
    local aliasName
    for aliasName in ${(o)subcommandAliasNames}; do
      printf "%20s: %s\n" "$aliasName" "Alias of '${subcommandAliases[$aliasName]}'"
    done
  } 1>&2
}

function assertionFailed() {
  local -r message="$1"
  local -r lineNumber="${2:-0}"
  echo "❗ Assertion failed (bug): line ${lineNumber}: $message" 1>&2
  exit 1
}

function isTrue() {
  local -r value="$1"
  if [[ "${(L)value}" == "true" ]]; then
    return 0
  else
    return 1
  fi
}

local isVerbose="false"
function verbosePrint() {
  local -r message="$1"
  if isTrue $isVerbose; then
    printInfo "$message"
  fi
}

local -A __cache_isSupportedFile=()
function isSupportedFile() {
  local -r filePath="$1"

  function __isSupportedFile() {
    if [[ ! -f "$filePath" ]]; then
      return 1
    fi

    local -r fileContentType=$(mdls -raw -nullMarker "" -name kMDItemContentType "$filePath")
    if (( $supportedContentTypes[(Ie)$fileContentType] )); then
      return 0
    fi
    return 1
  }

  if [[ -n "${__cache_isSupportedFile[(i)$filePath]}" ]]; then
    if isTrue "${__cache_isSupportedFile[$filePath]}"; then
      return 0
    else
      return 1
    fi
  fi

  if __isSupportedFile; then
    __cache_isSupportedFile[$filePath]="true"
    return 0
  else
    __cache_isSupportedFile[$filePath]="false"
    return 1
  fi
}

function allFiles() {
  local -A parsedArguments=()
  zparseopts -D -E -A parsedArguments -- -validate
  local -r validate=$(
    if [[ -n "${parsedArguments[(i)--validate]}" ]]; then
      echo "true"
    else
      echo "false"
    fi
  )

  local -r -a givenFilePaths=($@)
  local filePath
  for filePath in $filePaths; do
    if [[ -f "$filePath" ]]; then
      if isTrue $validate && ! isSupportedFile "$filePath"; then
        printWarning "Unsupported file at ${filePath}."
        continue
      fi
      echo $filePath
    elif [[ -d "$filePath" ]]; then
      local subFilePaths=(${filePath%%/}/**/*(-.))
      local subFilePath
      for subFilePath in $subFilePaths; do
        local fontPathCandidate=$(
          if [[ -f "$subFilePath" ]]; then
            echo $subFilePath
          elif [[ -L "$subFilePath" ]]; then
            readlink -f "$subFilePath" 
          fi
        )
        if isTrue $validate && ! isSupportedFile "$fontPathCandidate"; then
          printWarning "Unsupported file at ${fontPathCandidate}."
          continue
        fi
        echo $fontPathCandidate
      done
    else
      printWarning "File not found at ${filePath}."
    fi
  done
}

function decodeMDString() {
  local rawString="${1-}"
  if [[ "$rawString" =~ '^".+"$' ]]; then
    rawString="${rawString//\\U/\\u}"
  else
    rawString="${(q)rawString}"
  fi
  eval "echo $rawString"
}

function decodedMDArrayForNameAtPath() {
  [[ $#@ -eq 2 ]] || assertionFailed "decodedMDArrayForNameAtPath() requires exactly two arguments." ${(%):-%I}

  local -r mdName="$1"
  local -r filePath="$2"
  local -r mdArrayLinesString=$(mdls -raw -nullMarker "" -name "$mdName" "$filePath")
  local -r -a mdArrayLines=(${(f)mdArrayLinesString})
  local -r numberOfMDArrayLines=$(( $#mdArrayLines + 0 ))
  local mdArrayLine
  local ii
  for ii in {1..$numberOfMDArrayLines}; do
    mdArrayLine="${${mdArrayLines[$ii]##[[:space:]]##}%%[[:space:]]##}"
    if [[ -z "$mdArrayLine" ]]; then
      continue
    fi
    if [[ $ii -eq 1 ]] && [[ "$mdArrayLine" == "(" ]]; then
      continue
    fi
    if [[ $ii -eq $numberOfMDArrayLines ]] && [[ "$mdArrayLine" == ")" ]]; then
      continue
    fi
    if [[ $ii -gt 1 ]]; then
      mdArrayLine=${mdArrayLine%%,}
    fi
    printf '%s\n' "$(decodeMDString "$mdArrayLine")"
  done
}

local -A __cache_printItemsForAttributeAtPath=()
function printItemsForAttributeAtPath() {
  local -A parsedArguments=()
  zparseopts -D -E -A parsedArguments -- -with-filename
  local -r withFilename=$(
    if [[ -n "${parsedArguments[(i)--with-filename]}" ]]; then
      echo "true"
    else
      echo "false"
    fi
  )

  [[ $#@ -eq 2 ]] || assertionFailed "printItemsForAttributeAtPath() requires exactly one attribute name and one file path." ${(%):-%I}

  local -r attributeName="$1"
  local -r filePath="$2"
  [[ -f "$filePath" ]] && isSupportedFile "$filePath" \
    || assertionFailed "printItemsForAttributeAtPath() requires a valid file path." ${(%):-%I}

  local -r cacheKey="${filePath}:${attributeName}"
  function __storeCache_fontAttributeItemsString() {
    if [[ -n "${__cache_printItemsForAttributeAtPath[(i)$cacheKey]}" ]]; then
      verbosePrint "Cache hit for $cacheKey"
      return 0
    fi

    local -r parsedItems=$(decodedMDArrayForNameAtPath "$attributeName" "$filePath")
    __cache_printItemsForAttributeAtPath[$cacheKey]="$parsedItems"
  }

  if isTrue $withFilename; then
    echo "${filePath}:"
  fi
  __storeCache_fontAttributeItemsString "$cacheKey"
  local fontAttributeItem
  for fontAttributeItem in ${(f)__cache_printItemsForAttributeAtPath[$cacheKey]}; do
    if isTrue $withFilename; then
      printf '  %s\n' "$fontAttributeItem"
    else
      printf '%s\n' "$fontAttributeItem"
    fi
  done
}

function xmlEscape() {
  local -r string="${1-}"
  echo "${${${string//&/&amp;}//</&lt;}//>/&gt;}"
}

##### SUBCOMMANDS #####

function fontutil---help() {
  printHelp
  return 0
}

function __fontutil-attributes-for-files() {
  local -A parsedArguments=()
  zparseopts -D -E -A parsedArguments -- -help
  local -r attributeName="$1"; shift
  local -r -a filePaths=($@)

  function __printAttributesForFilesHelp() {
    {
      echo "${subcommands[$subcommandName]:-${subcommands[$subcommandAliases[$subcommandName]]}}"
      echo "  Usage: $commandName $subcommandName FILE..."
    } 1>&2
  }

  if [[ -n "${parsedArguments[(i)--help]}" ]]; then
    __printAttributesForFilesHelp
    return 0
  fi

  if [[ $#filePaths -lt 1 ]]; then
    printError "No file specified."
    __printAttributesForFilesHelp
    return 1
  fi

  local -r expandedAllFilePathsString=$(allFiles --validate $filePaths)
  local -r -a expandedAllFilePaths=(${(f)expandedAllFilePathsString})
  local fontFilePath
  for fontFilePath in $expandedAllFilePaths; do
    if [[ $#expandedAllFilePaths -gt 1 ]]; then
      printItemsForAttributeAtPath "$attributeName" --with-filename "$fontFilePath"
      printf '\n'
    else 
      printItemsForAttributeAtPath "$attributeName" "$fontFilePath"
    fi
  done
}

function fontutil-authors() {
  __fontutil-attributes-for-files kMDItemAuthors $@
}

function fontutil-caveat() {
  echo "$fontutilCaveat"
}

function fontutil-copyright() {
  __fontutil-attributes-for-files kMDItemCopyright $@
}

function fontutil-family() {
  __fontutil-attributes-for-files com_apple_ats_name_family $@
}

function fontutil-family-name() {
  fontutil-family $@
}

function fontutil-fond-name() {
  __fontutil-attributes-for-files com_apple_ats_name_fond $@
}

function fontutil-full-name() {
  __fontutil-attributes-for-files com_apple_ats_name_full $@
}

typeset -g -A __cache_fontutil_hash=()
function fontutil-hash() {
  # Global variables aren't shared with subprocess, so...
  function __storeCache_hashOfFile() {
    [[ $#@ -eq 1 ]] || assertionFailed "__storeCache_hashOfFile() requires exactly one file path." ${(%):-%I}
    local -r filePath="$1"

    if [[ -n "${__cache_fontutil_hash[(I)$filePath]}" ]]; then
      verbosePrint "Cache hit for hash value of ${filePath}."
      return 0
    fi

    [[ -f "$filePath" ]] || assertionFailed "File not found at ${filePath}." ${(%):-%I}
    local -r hashed=${(L)$(shasum -a 256 -b "$filePath")[(w)1]}
    [[ "$hashed" =~ ^[0-9a-f]{64}$ ]] || assertionFailed "Unexpected hash value." ${(%):-%I}
    __cache_fontutil_hash[$filePath]="$hashed"
  }

  local -r -a filePaths=($@)
  if [[ $#filePaths -lt 1 ]]; then
    printError "No file specified."
    return 1
  fi

  local -r -a fontFiles=(${(@f)$(allFiles --validate $filePaths)})
  if [[ $#fontFiles -lt 1 ]]; then
    printError "No supported files."
    return 1
  elif [[ $#fontFiles -eq 1 ]]; then
    __storeCache_hashOfFile ${fontFiles[1]}
    echo "${__cache_fontutil_hash[${fontFiles[1]}]}"
  else
    local -a hashValues=()
    local fontFile
    for fontFile in $fontFiles; do
      __storeCache_hashOfFile "$fontFile"
      hashValues=($hashValues "${__cache_fontutil_hash[$fontFile]}")
    done
    hashValues=(${(o)hashValues})
    
    local -r tmpFile="$(mktemp)"
    echo ${(j::)hashValues} | xxd -r -p >"$tmpFile"
    __storeCache_hashOfFile "$tmpFile"
    echo "${__cache_fontutil_hash[$tmpFile]}"
  fi
}

function fontutil-mobileconfig() {
  function printMobileconfigHelp() {
    {
      echo "Usage: $commandName $subcommandName [--help] --name NAME [--description DESCRIPTION] [--organization ORGANIZATION] [--output OUTPUT] FILE..."
      echo
      echo "Options:"
      echo "  --help: View this message."
      echo "  --name NAME: The name of the configuration."
      echo "  --description DESCRIPTION: The description of the configuration."
      echo "  --organization ORGANIZATION: The publisher of the configuration."
      echo "  --output OUTPUT: A file that configuration is written to. (Default: - (standard output))"
      echo "  --force: Write configuration even if a file already exists."
    } 1>&2
  }

  local -A parsedArguments=()
  zparseopts -D -E -M -A parsedArguments -- \
    -help \
    n: -name:=n \
    d: -description:=d \
    -organization: \
    o: -output:=o \
    f -force=f \

  if [[ -n "${parsedArguments[(i)--help]}" ]]; then
    printMobileconfigHelp
    return 0
  fi

  local -r -a filePaths=($@)
  local -A confOptions=(
    [name]=""
    [description]=""
    [organization]=""
    [output]="-"
    [force]="false"
  )
  local -A keyMap=(
    [-n]="name"
    [-d]="description"
    [--organization]="organization"
    [-o]="output"
    [-f]="force"
  )
  local -a requiredOptions=(name)
  local -a booleanOptions=(force)

  local aKey
  local aValue
  for aKey aValue in ${(kv)keyMap}; do
    if [[ -n "${parsedArguments[(i)$aKey]}" ]]; then
      if (( $booleanOptions[(I)$aValue] )); then
        confOptions[$aValue]="true"
      else
        confOptions[$aValue]="${parsedArguments[$aKey]##=}"
      fi
      verbosePrint "Option '$aValue' is set to \"${confOptions[$aValue]}\"."
    fi
    if (( $requiredOptions[(I)$aValue] )) && if [[ -z "${confOptions[$aValue]}" ]]; then
      printError "Missing required option: ${aValue}."
      printMobileconfigHelp
      return 1
    fi
  done

  local -r mustGenerateDescription=$({
    if [[ -z "$confOptions[description]" ]]; then
      echo true
    else
      echo false
    fi
  })

  local -r mustGenerateOrganization=$({
    if [[ -z "$confOptions[organization]" ]]; then
      echo true
    else
      echo false
    fi
  })
  local -a authorsAndOrginizations=()

  local -r ouputIsStdout=$({
    if [[ "$confOptions[output]" == "-" ]]; then
      echo true
    else 
      echo false
    fi
  })
  local overwrite="false"
  local tmpOut=""
  if isTrue $ouputIsStdout; then;
    verbosePrint "Configuration is written to standard output."
  else
    if ! [[ "${(L)confOptions[output]}" =~ \.mobileconfig$ ]]; then
      confOptions[output]="${confOptions[output]}.mobileconfig"
    fi

    if [[ -d "$confOptions[output]" ]]; then
      printError "Can't write configuration to directory."
      return 1
    fi
    if [[ -f "$confOptions[output]" ]]; then
      if ! isTrue $confOptions[force]; then
        printError "File already exists at ${confOptions[output]}."
        return 1
      elif [[ ! -w "$confOptions[output]" ]]; then
        printError "File is not writable at ${confOptions[output]}."
        return 1
      else
        overwrite="true"
        tmpOut=$(mktemp)
        verbosePrint "Configuration will be overwritten to ${confOptions[output]}."
        verbosePrint "(Temporarily written to $tmpOut)"
      fi
    fi
  fi

  local -a supportedFilePaths=()
  allFiles --validate $filePaths | while read -r aFile; do
    supportedFilePaths=($supportedFilePaths $aFile)
  done
  if [[ $#supportedFilePaths -lt 1 ]]; then
    printError "No supported files specified."
    printMobileconfigHelp
    return 1
  else
    verbosePrint "Processing ${#supportedFilePaths} supported files..."
    if isTrue $mustGenerateDescription; then
      confOptions[description]="This configuration contains ${#supportedFilePaths}"
      if [[ $#supportedFilePaths -eq 1 ]]; then
        confOptions[description]+=" font."
      else
        confOptions[description]+=" fonts."
      fi
    fi
  fi

  function __writeConf() {
    local -r confLine="${1-}"
    if isTrue $ouputIsStdout; then
      echo "$confLine"
    elif isTrue $overwrite; then
      echo "$confLine" >>"$tmpOut"
    else
      echo "$confLine" >>"${confOptions[output]}"
    fi
  }

  function __writeFont() {
    local -r fontFilePath="${1-}"
    isSupportedFile "$fontFilePath" || assertionFailed "Unsupported file?!" ${(%):-%I}

    function __fontName() {
      local -r -a priority=(full-name fond-name postscript-name family-name)
      local pr
      for pr in $priority; do
        local -r -a maybeName=(${(ps:\n:)$("fontutil-$pr" "$fontFilePath")})
        if [[ $#maybeName -gt 0 ]] && [[ -n "${maybeName[1]}" ]]; then
          echo "${maybeName[1]}"
          return 0
        fi
      done
      echo $(basename "$fontFilePath")
    }
    local -r fontName=$(__fontName)
    local -r fontUUID=$(fontutil-uuid "$fontFilePath")
    local -r fontCopyright=$(fontutil-copyright "$fontFilePath")
    local -r fontDescription=$(
      if [[ -n "$fontCopyright" ]]; then
        echo "Configures \"$fontName\" font settings. $fontCopyright"
      else
        echo "Configures \"$fontName\" font settings."
      fi
    )
    
    __writeConf '      <dict>'
    __writeConf '        <key>Font</key>'
    __writeConf '        <data>'

    base64 -b 76 -i "$fontFilePath" | while read -r base64Line; do
      __writeConf "          $base64Line"
    done

    __writeConf '        </data>'
    __writeConf '        <key>Name</key>'
    __writeConf "        <string>$(xmlEscape "$fontName")</string>"
    __writeConf '        <key>PayloadDescription</key>'
    __writeConf "        <string>$(xmlEscape "$fontDescription")</string>"
    __writeConf '        <key>PayloadDisplayName</key>'
    __writeConf '        <string>Font</string>'
    __writeConf "        <key>PayloadIdentifier</key>"
    __writeConf "        <string>com.apple.font.${fontUUID}</string>"
    __writeConf '        <key>PayloadType</key>'
    __writeConf '        <string>com.apple.font</string>'
    __writeConf '        <key>PayloadUUID</key>'
    __writeConf "        <string>${fontUUID}</string>"
    __writeConf '        <key>PayloadVersion</key>'
    __writeConf '        <integer>1</integer>'
    __writeConf '      </dict>'

    if isTrue $mustGenerateOrganization; then
      local anAuthor
      fontutil-authors "$fontFilePath" | while read -r anAuthor; do
        verbosePrint "Author: $anAuthor"
        if [[ $authorsAndOrginizations[(I)$anAuthor] -lt 1 ]]; then
          authorsAndOrginizations+=($anAuthor)
        fi
      done

      local aPublisher
      fontutil-publishers "$fontFilePath"  | while read -r aPublisher; do
        verbosePrint "Publisher: $aPublisher"
        if [[ $authorsAndOrginizations[(I)$aPublisher] -lt 1 ]]; then
          authorsAndOrginizations+=($aPublisher)
        fi
      done
    fi
  }

  # Property List
  __writeConf '<?xml version="1.0" encoding="UTF-8"?>'
  __writeConf '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">'
  __writeConf '<plist version="1.0">'
  __writeConf '  <dict>'

  ## Begin Font Payloads
	__writeConf '    <key>PayloadContent</key>'
	__writeConf '    <array>'
  
  local fontFilePath
  for fontFilePath in $supportedFilePaths; do
    __writeFont "$fontFilePath"
  done

  ## End Font Payloads
  __writeConf '    </array>'

  ## Begin Property List Info
  local -r payloadUUID=$(fontutil-uuid $supportedFilePaths)
  confOptions[description]+=" (This file is generated by fontutil-mac; https://github.com/YOCKOW/fontutil-mac; $fontutilCaveat)"
  if isTrue $mustGenerateOrganization; then
    verbosePrint "Set organization to the authors and publishers of given font(s)."
    confOptions[organization]="${(j:, :)authorsAndOrginizations}"
  fi
  __writeConf '    <key>PayloadDescription</key>'
	__writeConf "    <string>$(xmlEscape "${confOptions[description]}")</string>"
	__writeConf '    <key>PayloadDisplayName</key>'
	__writeConf "    <string>$(xmlEscape "$confOptions[name]")</string>"
	__writeConf '    <key>PayloadIdentifier</key>'
	__writeConf "    <string>jp.YOCKOW.fontutil.${payloadUUID}</string>"
  __writeConf '    <key>PayloadOrganization</key>'
	__writeConf "    <string>$(xmlEscape "$confOptions[organization]")</string>"
	__writeConf '    <key>PayloadRemovalDisallowed</key>'
	__writeConf '    <false/>'
	__writeConf '    <key>PayloadType</key>'
	__writeConf '    <string>Configuration</string>'
	__writeConf '    <key>PayloadUUID</key>'
	__writeConf "    <string>${payloadUUID}</string>"
	__writeConf '    <key>PayloadVersion</key>'
	__writeConf '    <integer>1</integer>'

  ## End Propery List
  __writeConf '  </dict>'
  __writeConf '</plist>'

  if isTrue $overwrite; then
    verbosePrint "Copying mobileconfig file from $tmpOut to ${confOptions[output]}..."
    cp -f "$tmpOut" "$confOptions[output]"
  fi
}

function fontutil-postscript-name() {
  __fontutil-attributes-for-files com_apple_ats_name_postscript $@
}

function fontutil-publishers() {
  __fontutil-attributes-for-files kMDItemPublishers $@
}

function fontutil-style-name() {
  __fontutil-attributes-for-files com_apple_ats_name_style $@
}

function fontutil-uuid() {
  function __hash-to-uuid() {
    local -r hashValue="${1-}"
    verbosePrint "Hash Value: $hashValue"
    if [[ "$hashValue" =~ ^([0-9a-f]{8})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{4})([0-9a-f]{12}) ]]; then
      local generatedUUID="${match[1]}-${match[2]}-${match[3]}-${match[4]}-${match[5]}"
      generatedUUID[15]="8"

      case ${generatedUUID[20]} in
      0 | 4 | 8 | c) generatedUUID[20]="8";;
      1 | 5 | 9 | d) generatedUUID[20]="9";;
      2 | 6 | a | e) generatedUUID[20]="a";;
      3 | 7 | b | f) generatedUUID[20]="b";;
      *) assertionFailed "Unexpected character in UUID: ${generatedUUID[20]}" ${(%):-%I}
      esac

      echo ${(U)generatedUUID}
    else
      assertionFailed "Invalid hash value: $hashValue" ${(%):-%I}
    fi
  }

  local hashValue=""
  fontutil-hash $@ | read hashValue
  if [[ -n "$hashValue" ]]; then # It's empty if no file is specified.
    __hash-to-uuid "$hashValue"
  fi
}

function fontutil-version() {
  __fontutil-attributes-for-files kMDItemVersion $@
}

##### MAIN #####

function _main_() {
  if [[ $#@ -lt 1 ]]; then
    printError "No subcommand specified."
    printHelp
    exit 1
  fi

  subcommandName="$1"
  shift

  local -A commonParsedArguments=()
  zparseopts -D -E -A commonParsedArguments -- v -verbose=v
  if [[ -n "${commonParsedArguments[(i)-v]}" ]]; then
    isVerbose="true"
    verbosePrint "Verbose mode enabled."
  fi

  local -r -a subcommandArguments=($@)
  if [[ -n "$subcommands[(I)$subcommandName]" ]]; then
    "fontutil-$subcommandName" $subcommandArguments
  elif [[ -n "$subcommandAliases[(I)$subcommandName]" ]]; then
    "fontutil-${subcommandAliases[$subcommandName]}" $subcommandArguments
  else
    printError "Unknown subcommand: $subcommandName"
    printHelp
    exit 1
  fi
}
_main_ $@
